var cols, rows;
var scl = 20;
var w = 1400;
var h = 1000;

var flying = 0;

var terrain = [];

function setup() {
  createCanvas(600, 600, WEBGL);
  cols = w / scl;
  rows = h / scl;
  
  for (var x = 0; x < cols; x++) {
    terrain[x] = [];
    /*for (var y = 0; y < rows; y++) {
      terrain[x][y] = 0; //specify a default value for now
    }*/
  }
  noStroke();
}

function draw() {

  flying -= 0.1;
  var yoff = flying;
  for (var y = 0; y < rows; y++) {
    var xoff = 0;
    for (var x = 0; x < cols; x++) {
      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);
      xoff += 0.2;
    }
    yoff += 0.2;
  }


  background(10, 10, 250);
  translate(0, 50);
  rotateX(PI / 3);
  fill(200, 200, 200, 90);
  translate(-w /2 , -h / 2 );
  for (var y = 0; y < rows - 1; y++) {
    beginShape(TRIANGLE_STRIP);
    for (var x = 0; x < cols; x++) {
      let v = terrain[x][y];
      v = map(v, -100, 100, 0, 255);
      fill(v-110, v-20, v-110);
      vertex(x * scl, y * scl, terrain[x][y]);
      vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);
    }
    endShape();
  }
  translate(w /2 , h / 2 );
  push();
  //move your mouse to change light position
  let locX = (mouseX / width - 0.5) * 2
  let locY = (mouseY / height - 0.5) * 2;
  directionalLight(255, 0, 0, locX, locY, 50);
  //move the camera away from the plane by a sin wave
  camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);
  sphere(35);
  pop();
}
